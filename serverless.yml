service: "serverless-websockets-example"

custom:
  CONNECTIONS_TABLE_NAME: ${self:service}-connections-table-${sls:stage}

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-2
  stage: test
  timeout: 15
  memorySize: 256
  environment:
    CONNECTIONS_TABLE_NAME: ${self:custom.CONNECTIONS_TABLE_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.CONNECTIONS_TABLE_NAME}

functions:
  connect:
    handler: functions/connect.handler
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: functions/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  sendMessage:
    handler: functions/sendMessage.handler
    environment:
      WEBSOCKET_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', !Ref AWS::Region, '.amazonaws.com/', '${sls:stage}']]
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ConnectionsTable
              - StreamArn

resources:
  Resources:
    WebsocketsApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-${self:provider.stage}-websocket-api
        ProtocolType: WEBSOCKET
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.CONNECTIONS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S 
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: "NEW_IMAGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1